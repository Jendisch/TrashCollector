@model IEnumerable<TrashCollector.Models.ApplicationUser>


<!DOCTYPE html>
<html>
<head>
    
    <title>Simple Map</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
        #map {
            height: 500px;
            width: 700px;
            /*margin: 50px;
             padding-top: 30px;*/
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 500px;
            margin: 10px;
            padding: 10px;
        }
    </style>
</head>
<body>
<div class="row">
    <div class="col-md-6">
        <br />
        <bold><h1>Directions</h1></bold>
        <bold><h3>Please Select Route Zip Code</h3></bold>
    </div>
    <div class="col-md-6">
    </div>
    <br />
    <br />
    <br />
    <br />
    <br />
    @using (Html.BeginForm("DisplayRouteMap", "RouteMap", FormMethod.Post, new { id = "TheForm" }))
    {
        <div>
            @Html.DropDownList("ZipCode", new SelectList(ViewBag.ZipCodes), " Select ZipCode ", new
       {
           onchange = "document.getElementById('TheForm').submit();"
       })
        </div>
    }
</div>
<br />
<br />
<table class="table">
    <tr>
        <th>
            Customer
        </th>
        <th>
            Address
        </th>
        <th>
            <center>Click To Confirm Pickup</center>
        </th>
        <th></th>
    </tr>

@foreach (var item in Model)
{
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.FirstName) @Html.DisplayFor(modelItem => item.LastName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.CombineAddress)
        </td>
        <td>
            <bold><center>@Html.ActionLink("Picked Up Trash", "ChargeClient", "RouteMap", new { id = item.Id }, new { @class = "btn btn-default" })</center></bold>
        </td>
    </tr>
}

</table>
<h3>Google Map of Routes</h3>
<br />

<div id="map"></div>
<div id="directions-panel"></div>
@using Newtonsoft.Json;

<script>
        var geocoder;
        var map;
        var directionsDisplay;
        var directionsService;
        var stepDisplay;
        var pickups = @Html.Raw(JsonConvert.SerializeObject(Model, Formatting.Indented,
                            new JsonSerializerSettings
                            {
                                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                            }));
        var waypts = [];
        function initMap() {
            geocoder = new google.maps.Geocoder();
            directionsService = new google.maps.DirectionsService;
            directionsDisplay = new google.maps.DirectionsRenderer;
            var latlng = new google.maps.LatLng(43.034, -87.911);
            var mapOptions = {
                center: latlng,
                zoom: 12,
            };
            map = new google.maps.Map(document.getElementById("map"), mapOptions);
            directionsDisplay.setMap(map);
            codeAddress();
            calculateAndDisplayRoute();
        }

        function codeAddress() {
            for(var i = 0; i < pickups.length; i++){
                var address = pickups[i].CombineAddress;
                waypts.push({
                    location: address,
                    stopover: true
                });
                geocoder.geocode( { 'address': address}, function(results, status) {
                    if (status == 'OK') {
                        map.setCenter(results[0].geometry.location);
                        var marker = new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location,
                            animation: google.maps.Animation.DROP
                        });
                    } else {
                        alert('Geocode was not successful for the following reason: ' + status);
                    }
                });
            }
        }

        function calculateAndDisplayRoute() {
            console.log(waypts);
            directionsService.route({
                origin: "333 N Plankinton Ave Milwaukee WI 53202",
                destination: "333 N Plankinton Ave Milwaukee WI 53202",
                waypoints: waypts,
                optimizeWaypoints: true,
                travelMode: 'DRIVING'
            }, function(response, status) {
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                    var route = response.routes[0];
                    var summaryPanel = document.getElementById('directions-panel');
                    summaryPanel.innerHTML = '';
                    for (var i = 0; i < route.legs.length; i++) {
                        var routeSegment = i + 1;
                        summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
                            '</b><br>';
                        summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
                        summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
                        summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
                    }
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB75pBB0awnpqlNbscw8mhSvoRJdnIIQEA&callback=initMap"
        async defer></script>

</body>
</html>